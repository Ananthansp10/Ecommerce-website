<body class="bg-gray-100">

  <!-- Search and Sorting Section -->
  <div class="container mx-auto px-4 py-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Search Results of {{item}}</h1>
      <!-- Sort Options -->
      <select onchange="sortProductByPrice(this,'{{item}}')" id="price" class="bg-white border border-gray-300 text-gray-700 py-2 px-4 rounded-md shadow-sm focus:outline-none focus:ring focus:ring-indigo-200">
        <option value="">Filter</option>
        <option value="low-to-high">Price: Low to High</option>
        <option value="high-to-low">Price: High to Low</option>
      </select>
    </div>
    {{#if products}}
    <!-- Product Grid -->
    <div class="grid gap-6 md:grid-cols-2 ml-4">
        {{#each products}}
      <div class="relative bg-white rounded-lg shadow-lg p-6 flex flex-col md:flex-row md:space-x-6">
        
        <button class="absolute top-4 right-4 text-gray-400 hover:text-red-500 focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
          </svg>
        </button>

        <div class="w-full md:w-1/3">
          <img src="{{this.image.[0]}}" onclick="viewproduct('{{this._id}}')" alt="Product Image" class="rounded-lg w-full h-full object-cover">
        </div>

        <div class="flex-1 mt-4 md:mt-0">
          <h2 class="text-lg font-semibold text-gray-800">{{this.name}}</h2>
          <p class="text-gray-600 mt-2 text-sm">{{this.description}}</p>

          <div class="mt-4 flex items-center justify-between">
            <span class="text-xl font-bold text-gray-800">RS:{{this.price}}</span>
            <div class="flex space-x-1 text-yellow-400">
              <span>★</span><span>★</span><span>★</span><span>★</span><span class="text-gray-300">★</span>
            </div>
          </div>

          <div class="mt-4 flex space-x-2">
            {{#if this.isDisabled}}
            <button onclick="showOutOfStock()" class="flex-1 py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-indigo-200 bg-gray-400 text-white cursor-not-allowed">Buy Now</button>
            <button onclick="showOutOfStock()" class="flex-1 py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-green-200 bg-gray-400 text-white cursor-not-allowed">Add to Cart</button>
            {{else}}
             <button class="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring focus:ring-indigo-200">Buy Now</button>
             <button onclick="addToCart('{{this._id}}')" class="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring focus:ring-green-200">Add to Cart</button>
            {{/if}}
          </div>
        </div>
      </div>
      {{/each}}
    </div>
    {{else}}
    <div class="flex flex-col items-center justify-center h-64 bg-gray-100 rounded-lg p-6">
  <!-- Icon -->
  <svg class="w-16 h-16 text-gray-400 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A2 2 0 013 15.382V8.618a2 2 0 01.553-1.366L9 4m6 16l5.447-2.724A2 2 0 0021 15.382V8.618a2 2 0 00-.553-1.366L15 4m-6 16V4m6 16V4M9 4h6" />
  </svg>

  <!-- Message -->
  <h3 class="text-lg font-semibold text-gray-600 mb-2">No Products Found</h3>
  <p class="text-gray-500 text-center">Try adjusting your search or filter to find what you're looking for.</p>

  <!-- Button to go back to products -->
  <button onclick="goToProducts()" class="mt-6 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
    Back to Products
  </button>
</div>
    {{/if}}
  </div>

</body>

<script>
    function viewproduct(id){
        window.location.href = `/product/productPage/${id}`;
    }

    function goToProducts() {
    window.location.href = '/';
   }

   function addToCart(productId) {
  fetch(`/users/addtocart/${productId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      return response.text();
    }
  })
  .then(data => {
    if (typeof data === 'string') {
      Swal.fire({
        title: 'Please login!',
        text: 'You need to login to add products to your cart.',
        icon: 'info',
        confirmButtonText: 'Go to Login',
        allowOutsideClick: false,
        showCancelButton: true,
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          location.href = '/users/login';
        }
      });
    } else if (data.status) {
      // Product successfully added
      Swal.fire({
        title: 'Success!',
        text: 'Product added to cart successfully!',
        icon: 'success',
        confirmButtonText: 'Continue Shopping',
        showCancelButton: true,
        cancelButtonText: 'Go to Cart'
      }).then((result) => {
        if (result.dismiss === Swal.DismissReason.cancel) {
          location.href = '/product/cartPage';
        } else {
          location.href = '/';
        }
      });
    } else {
      // Failed to add product
      Swal.fire({
        title: 'Error!',
        text: 'Failed to add product to cart.',
        icon: 'error',
        confirmButtonText: 'Try Again',
        timer: 2000
      });
    }
  })
  .catch(error => {
    console.log('Error adding to cart:', error);
    Swal.fire({
      title: 'Oops!',
      text: 'Something went wrong. Please try again.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
  });
}

  function sortProductByPrice(value,product){
    const item = localStorage.getItem('searchItem') || '';
    if(item){
    location.href=`/product/sortSearchProduct/${value.value}/${item}`
    }
  }

  function showOutOfStock(){
    Swal.fire({
    icon: 'error',
    title: 'Out Of Stock',
    text: 'This product is currently out of stock.',
    confirmButtonText: 'OK',
    confirmButtonColor: '#d33'
  });
  }

  document.addEventListener('DOMContentLoaded', function() {
    const item ="{{item}}"
    localStorage.setItem('searchItem', item);
  });
</script>