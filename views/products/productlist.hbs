<div class="container mx-auto px-4 py-8">
    <!-- Filters Section -->
    <div class="flex flex-col md:flex-row justify-between items-center mb-6">
        <div class="flex space-x-4">
            <select class="border rounded-lg p-2" id="categorySelect">
                <option value="">Select Category</option>
                 <option value="all">All</option>
                <option value="mobile">Mobile</option>
                <option value="accessory">Accessories</option>
            </select>
            <select class="border rounded-lg p-2" id="sortSelect" onchange="filterProducts()">
                <option value="">Sort by Price</option>
                <option value="low-to-high">Low to High</option>
                <option value="high-to-low">High to Low</option>
            </select>
        </div>
    </div>

    <!-- Product List Section -->
    <div class="grid gap-6 md:grid-cols-2 ml-4">
        {{#each products}}
      <div class="relative bg-white rounded-lg shadow-lg p-6 flex flex-col md:flex-row md:space-x-6">
        
        {{#if this.isOnWishList}}
        <button onclick="removeFromWish('{{this._id}}')" class="absolute top-4 right-4 text-red-500 hover:text-red-500 focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
          </svg>
        </button>
        {{else}}
        <button onclick="addToWishList('{{this._id}}')" class="absolute top-4 right-4 text-gray-400 hover:text-red-500 focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
          </svg>
        </button>
        {{/if}}

        <div class="w-full md:w-1/3">
          <img src="{{this.images.[0]}}" onclick="viewproduct('{{this._id}}')" alt="Product Image" class="rounded-lg w-full h-full object-cover">
        </div>

        <div class="flex-1 mt-4 md:mt-0">
          <h2 class="text-lg font-semibold text-gray-800">{{this.name}}</h2>
          <p class="text-gray-600 mt-2 text-sm">{{this.description}}</p>

          <div class="mt-4 flex items-center justify-between">
            <span class="text-xl font-bold text-gray-800">RS:{{this.price}}</span>
            <div class="flex space-x-1 text-yellow-400">
              <span>★</span><span>★</span><span>★</span><span>★</span><span class="text-gray-300">★</span>
            </div>
          </div>

          <div class="mt-4 flex space-x-2">
            {{#if this.isDisabled}}
             <button onclick="showOutOfStock()" class="flex-1 py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-indigo-200 bg-gray-400 text-white cursor-not-allowed">Buy Now</button>
            <button onclick="showOutOfStock()" class="flex-1 py-2 px-4 rounded-md focus:outline-none focus:ring focus:ring-green-200 bg-gray-400 text-white cursor-not-allowed">Add to Cart</button>
            {{else}}
            <button class="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring focus:ring-indigo-200">Buy Now</button>
            <button onclick="addToCart('{{this._id}}')" class="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring focus:ring-green-200">Add to Cart</button>
            {{/if}}
          </div>
        </div>
      </div>
      {{/each}}
    </div>
</div>

<script>
    {{!-- function findCategory(element){
        localStorage.setItem("selectedCategory", element.value);
        window.location.href = `/product/productsByCategory/${element.value}`;
    }

    function sortProduct(element){
        localStorage.setItem("selectedSort", element.value);
        window.location.href = `/product/sortproduct/${element.value}`;
    } --}}


     function filterProducts(){
        const category=document.getElementById("categorySelect").value
        const priceRange=document.getElementById("sortSelect").value
        location.href=`/product/filterproducts/${category}/${priceRange}`
     }


    function viewproduct(id){
        window.location.href = `/product/productPage/${id}`;
    }

    function showOutOfStock(){
    Swal.fire({
    icon: 'error',
    title: 'Out Of Stock',
    text: 'This product is currently out of stock.',
    confirmButtonText: 'OK',
    confirmButtonColor: '#d33'
  });
  }

    function addToCart(productId) {
  fetch(`/users/addtocart/${productId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      return response.text();
    }
  })
  .then(data => {
    if (typeof data === 'string') {
      Swal.fire({
        title: 'Please login!',
        text: 'You need to login to add products to your cart.',
        icon: 'info',
        confirmButtonText: 'Go to Login',
        allowOutsideClick: false,
        showCancelButton: true,
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          location.href = '/users/login';
        }
      });
    } else if (data.status) {
      // Product successfully added
      Swal.fire({
        title: 'Success!',
        text: 'Product added to cart successfully!',
        icon: 'success',
        confirmButtonText: 'Continue Shopping',
        showCancelButton: true,
        cancelButtonText: 'Go to Cart'
      }).then((result) => {
        if (result.dismiss === Swal.DismissReason.cancel) {
          location.href = '/product/cartPage';
        } else {
          //location.href = '/';
          var count=document.getElementById("cartCount").innerText
          count=parseInt(count) || 0
          document.getElementById("cartCount").innerText=count+1
        }
      });
    } else {
      // Failed to add product
      Swal.fire({
        title: 'Error!',
        text: 'Failed to add product to cart.',
        icon: 'error',
        confirmButtonText: 'Try Again',
        timer: 2000
      });
    }
  })
  .catch(error => {
    console.log('Error adding to cart:', error);
    Swal.fire({
      title: 'Oops!',
      text: 'Something went wrong. Please try again.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
  });
}

function addToWishList(productId){
  fetch(`/users/addtowishlist/${productId}`,{
    method:"POST"
  }).then((response)=>response.json()).then((response)=>{
    if(!response.status){
      Swal.fire({
      icon: 'error',
      title: 'User not logged In',
      text:response.message,
      confirmButtonText: 'Go to Login',
      showCancelButton: false,
      allowOutsideClick: false,
      customClass: {
        confirmButton: 'bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600'
      }
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = '/users/login';
      }
    });
    }else{
      if(response.status){
      Swal.fire({
      icon: 'success',
      title: 'Product Added!',
      text: 'The product has been successfully added to your wishlist.',
      confirmButtonText: 'OK',
      confirmButtonColor: '#3085d6',
      }).then(()=>{
        location.reload();
      })

      }else{
        Swal.fire({
        icon: 'error',
        title: 'Oops!',
        text:response.message,
        confirmButtonText: 'OK',
        confirmButtonColor: '#d33',
      }).then(()=>{
        location.reload();
      })

      }
    }
  })
}

function removeFromWish(productId) {
  swal.fire({
    title: "Are you sure?",
    text: "Do you really want to remove this product from your wishlist?",
    icon: "warning",
    showCancelButton: true,
    confirmButtonText: "Yes, remove it!",
    cancelButtonText: "Cancel"
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/users/removefromwish/${productId}`, {
        method: "POST"
      }).then((response) => response.json()).then((response) => {
        if(response.status){
          swal.fire({
            title: "Success!",
            text:response.message,
            icon: "success",
            button: "OK",
          }).then(() => {
            location.reload();
          });
        } else {
          swal.fire({
            title: "Error!",
            text: response.message,
            icon: "error",
            button: "OK",
          }).then(() => {
            location.reload();
          });
        }
      }).catch((error) => {
        swal({
          title: "Error!",
          text: "There was an issue with the request. Please try again.",
          icon: "error",
          button: "OK",
        });
      });
    }
  });
}
</script>
