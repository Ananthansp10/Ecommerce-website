<div class="container mx-auto p-4 md:p-8 space-y-8">
  <!-- Product Details Section -->
  <section class="bg-white p-6 rounded-lg shadow-lg space-y-4">
    <h2 class="text-xl font-semibold mb-4">Checkout</h2>
    <div class="space-y-4">
      <!-- Product 1 -->
      {{#each data}}
      <div class="flex items-center justify-between border-b pb-4">
        <img src="{{this.images.[0]}}" alt="Product Image" class="w-16 h-16 rounded object-cover">
        <div class="flex-1 ml-4">
          <h3 class="text-lg font-semibold">{{this.productName}}</h3>
          <p class="text-sm text-gray-500">Price: RS.{{#if this.offerPrice}}{{this.offerPrice}}{{else}}{{this.totalPrice}}{{/if}}</p>
          <p class="text-sm text-gray-500">Quantity: {{this.quantity}}</p>
        </div>
        <div class="text-right">
          <p class="text-lg font-semibold">Total: RS.{{#if this.offerPrice}}{{this.offerPrice}}{{else}}{{this.totalPrice}}{{/if}}</p>
        </div>
      </div>
      {{/each}}

      <!-- Order Summary with Subtotal, Shipping, Tax -->
      <div class="pt-4">
        <div class="flex justify-between">
          <p class="text-lg font-bold">Subtotal</p>
          <p class="text-lg font-bold">RS.{{subTotal}}</p>
        </div>
        <div class="flex justify-between">
          <p class="text-lg font-bold">Shipping</p>
          <p class="text-lg font-bold">RS.100</p>
        </div>
        <div class="flex justify-between">
          <p class="text-lg font-bold">Tax</p>
          <p class="text-lg font-bold">RS.50</p>
        </div>
        <div class="flex justify-between text-lg font-bold pt-4 border-t mt-4">
          <p>Total Price</p>
          <p id="total">RS.{{totalAmount}}</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Address Selection Section -->
  <section class="bg-white p-6 rounded-lg shadow-lg space-y-4">
    <h2 class="text-xl font-semibold mb-4">Select Delivery Address</h2>
    <div class="space-y-4">
      {{#if address}}
      {{#each address}}
      <label class="block p-4 border rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
        <input type="radio" id="address" name="address" value="{{this.addressId}}" class="mr-4">
        <div>
          <p class="font-semibold">Address {{this.key}}</p>
          <p class="text-sm text-gray-600">Address Type:{{this.addressType}}</p>
          <p class="text-sm text-gray-600">{{this.addressLine1}}</p>
          <p class="text-sm text-gray-600">{{this.addessLine2}}</p>
          <p class="text-sm text-gray-600">{{this.landmark}}</p>
          <p class="text-sm text-gray-600">{{this.city}}</p>
          <p class="text-sm text-gray-600">{{this.pincode}}</p>
          <p class="text-sm text-gray-600">{{this.state}}</p>
          <p class="text-sm text-gray-600">{{this.country}}</p>
        </div>
      </label>
      {{/each}}
      {{/if}}
    </div>

    <!-- Add New Address Button -->
    <button id="add-address-btn" class="mt-4 w-full text-blue-500 font-semibold underline">+ Add New Address</button>

    <!-- Add Address Form (Hidden initially) -->
    <div id="add-address-form" class="space-y-4 mt-4 hidden">
      <form action="/users/addAddressFromCart" method="POST" class="space-y-6">

      <!-- Address Type -->
      <div>
        <label for="address-type" class="block text-sm font-medium text-gray-600">Address Type</label>
        <select id="address-type" name="addressType" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" required>
          <option value="" disabled selected>Select address type</option>
          <option value="permanent">Permanent Address</option>
          <option value="temporary">Temporary Address</option>
        </select>
      </div>

      <!-- Address Line 1 -->
      <div>
        <label for="address-line1" class="block text-sm font-medium text-gray-600">Address Line 1</label>
        <input type="text" id="address-line1" name="addressLine1" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="House number, Street, Colony" required>
      </div>

      <!-- Address Line 2 -->
      <div>
        <label for="address-line2" class="block text-sm font-medium text-gray-600">Address Line 2</label>
        <input type="text" id="address-line2" name="addressLine2" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="Area, Landmark (Optional)">
      </div>

      <!-- City -->
      <div>
        <label for="city" class="block text-sm font-medium text-gray-600">City</label>
        <input type="text" id="city" name="city" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="Enter your city" required>
      </div>

      <!-- State -->
      <div>
        <label for="state" class="block text-sm font-medium text-gray-600">State</label>
        <input type="text" id="state" name="state" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="Enter your state" required>
      </div>

      <!-- Country -->
      <div>
        <label for="country" class="block text-sm font-medium text-gray-600">Country</label>
        <input type="text" id="country" name="country" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="Enter your country" required>
      </div>

      <!-- Pincode -->
      <div>
        <label for="pincode" class="block text-sm font-medium text-gray-600">Pincode</label>
        <input type="text" id="pincode" name="pincode" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="Enter your pincode" required>
      </div>

      <!-- Landmark -->
      <div>
        <label for="landmark" class="block text-sm font-medium text-gray-600">Landmark</label>
        <input type="text" id="landmark" name="landmark" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 focus:outline-none" placeholder="Enter a nearby landmark" />
      </div>

      <!-- Submit Button -->
      <div class="pt-4">
        <button type="submit" class="w-full py-3 px-4 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75">
          Add Address
        </button>
      </div>
    </form>
    </div>
  </section>

  <!-- Payment Method Section -->
  <section class="bg-white p-6 rounded-lg shadow-lg space-y-4">
    <h2 class="text-xl font-semibold mb-4">Payment Method</h2>
    <div class="space-y-4">
      <label class="flex items-center space-x-2">
        <input type="radio" name="payment" value="Cash On Delivery" class="form-radio h-5 w-5 text-blue-600">
        <span>Cash on Delivery</span>
      </label>
      <label class="flex items-center space-x-2">
        <input type="radio" name="payment" value="Online" class="form-radio h-5 w-5 text-blue-600">
        <span>Online Payment</span>
      </label>
      <label class="flex items-center space-x-2">
        <input type="radio" name="payment" value="Wallet" class="form-radio h-5 w-5 text-blue-600">
        <span>Wallet</span>
      </label>
    </div>
  </section>

  <!-- Place Order Button -->
  <div class="mt-5 mb-7">
  <button onclick="placeOrder('{{data.[0].cartId}}',{{totalAmount}},'{{couponCode}}')" class="w-full bg-green-500 text-white p-3 rounded-lg font-semibold hover:bg-green-600 transition duration-150">Place Order</button>
</div>

<!-- Modal for Order Confirmation -->
<div id="orderSuccessModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
  <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full text-center">
    
    <!-- Spinner Animation -->
    <div id="spinner" class="text-blue-500 text-5xl mb-4 animate-spin">
      <span class="spinner">&#x21bb;</span>
    </div>
    
    <!-- Checkmark Animation (hidden initially) -->
    <div id="checkmark" class="text-green-500 text-5xl mb-4 hidden">
      <span>âœ”</span>
    </div>
    
    <!-- Modal Text Content -->
    <h3 class="text-xl font-semibold mb-4">Order Placed Successfully!</h3>
    <p class="text-gray-700 mb-4">Your order has been placed. Thank you for shopping with us.</p>
    <button onclick="redirectToOrders()" class="w-full py-3 px-4 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75">
      View Orders
    </button>
  </div>
</div>

<!-- Add CSS for Spinner and Checkmark Animation -->
<style>
  .spinner {
    display: inline-block;
    font-size: 3rem;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes checkmark-animation {
    0% { opacity: 0; transform: scale(0.8); }
    50% { opacity: 1; transform: scale(1.2); }
    100% { opacity: 1; transform: scale(1); }
  }

  .checkmark {
    display: inline-block;
    font-size: 3rem;
    animation: checkmark-animation 0.5s ease forwards;
  }
</style>

<!-- Script for toggling address form -->
<script>
  document.getElementById('add-address-btn').addEventListener('click', function() {
    const form = document.getElementById('add-address-form');
    form.classList.toggle('hidden');
  });

function placeOrder(cartId, totalAmount,couponCode) {
  const selectedAddress = document.querySelector('input[name="address"]:checked');
  const paymentMethod = document.querySelector('input[name="payment"]:checked');

  if (selectedAddress && paymentMethod) {
    const addressId = selectedAddress.value;
    const payment = paymentMethod.value;

    fetch('/users/placecartorder', {
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        addressId,
        cartId,
        totalAmount,
        payment,
        couponCode
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status===true) {
        showOrderSuccessModal();
      } else if (data.noUserDetail) {
         Swal.fire({
        icon: 'warning',
        title: 'User Details Missing',
        text: 'Please complete your user details to proceed with the order.',
        confirmButtonText: 'Go to Add User Details'
      }).then(() => {
        location.href = '/users/adduserdetails';
      });
    }else if(data.status==='PENDING_PAYMENT'){
      initiateRazorpayPayment(data.orderId, data.key,data.amount,data.data);
    }
    })
    .catch(error => {
      console.error("Error placing order:", error);
      Swal.fire({
        icon: 'error',
        title: 'Order Error',
        text: 'An error occurred while placing your order. Please try again later.',
        confirmButtonText: 'OK'
      });
    });

  } else {
    if (!selectedAddress) {
      Swal.fire({
        icon: 'warning',
        title: 'No Address Selected',
        text: 'Please select an address to place the order.',
        confirmButtonText: 'OK'
      });
    }
    if (!paymentMethod) {
      Swal.fire({
        icon: 'warning',
        title: 'Payment Method Not Selected',
        text: 'Please select a payment method to place the order.',
        confirmButtonText: 'OK'
      });
    }
    if (!selectedAddress && !paymentMethod) {
      Swal.fire({
        icon: 'warning',
        title: 'No Address and Payment Method Selected',
        text: 'Please select an address and payment method to place the order.',
        confirmButtonText: 'OK'
      });
    }
  }
}

 function showOrderSuccessModal() {
    const modal = document.getElementById('orderSuccessModal');
    const spinner = document.getElementById('spinner');
    const checkmark = document.getElementById('checkmark');

    // Show modal and spinner
    modal.classList.remove('hidden');
    spinner.classList.remove('hidden');
    checkmark.classList.add('hidden');

    // After 2 seconds, hide spinner and show checkmark
    setTimeout(() => {
      spinner.classList.add('hidden');
      checkmark.classList.remove('hidden');
    }, 2000); // 2000ms = 2 seconds
  }

  function redirectToOrders() {
    window.location.href = '/users/orders';
  }

  function initiateRazorpayPayment(orderId, key,amount,data) {
    var options = {
        key: key, 
        amount:amount, 
        currency: 'INR',
        name: 'MOB N ACCESS',
        description: 'Order Payment',
        order_id: orderId, 
        handler: function(response) {
            verifyPayment(response,data);
        },
        prefill: {
            name: 'John Doe',
            email: 'john@example.com',
            contact: '9999999999'
        },
        theme: {
            color: '#F37254'
        }
    };

    var rzp = new Razorpay(options);
    rzp.open();
}

function verifyPayment(paymentResponse,data) {
    fetch('/users/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            razorpay_order_id: paymentResponse.razorpay_order_id,
            razorpay_payment_id: paymentResponse.razorpay_payment_id,
            razorpay_signature: paymentResponse.razorpay_signature,
            data:data
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.status) {
            Swal.fire({
                icon: 'success',
                title: 'Payment Verified',
                text: 'Your payment was verified successfully!',
                confirmButtonText: 'OK'
            }).then(() => {
                showOrderSuccessModal();
                window.location.href = '/users/orders';
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Payment Verification Failed',
                text: 'There was an issue verifying your payment. Please try again.',
                confirmButtonText: 'OK'
            }).then(()=>{
              location.reload();
            })
        }
    })
    .catch(error => {
        console.error('Error verifying payment:', error);
        Swal.fire({
            icon: 'error',
            title: 'Verification Error',
            text: 'An error occurred during payment verification. Please try again later.',
            confirmButtonText: 'OK'
        });
    });
}


</script>