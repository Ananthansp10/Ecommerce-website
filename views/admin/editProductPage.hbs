<div class="p-4 md:p-8 bg-gray-200 max-w-4xl mx-auto">
    <h2 class="text-2xl md:text-3xl font-bold text-gray-700 mb-4 md:mb-6">Edit Product</h2>

    <form class="space-y-4 md:space-y-6" onsubmit="editProduct(event,'{{product._id}}')">
        <!-- Product Name -->
        <div>
            <label for="product-name" class="block text-sm font-medium text-gray-700">Product Name</label>
            <input type="text" name="name" value="{{product.name}}" id="name" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter product name" />
        </div>
        <div class="mt-2 text-sm text-red-900 bg-red-300 p-2 rounded-md hidden" id="nameError"></div>

        <!-- Category -->
        <div>
            <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
            <select name="catType" id="category" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                <option value="">Select category</option>
                <option value="mobile" {{#if categoryOption.isMobile}}selected{{/if}} >Mobile</option>
                <option value="accessory" {{#if categoryOption.isAccessories}}selected{{/if}}>Accessory</option>
            </select>
        </div>

        <!-- Product Images (Four Images Upload) -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Product Images (Upload up to 4 images)</label>

            <!-- Image 1 -->
            <div class="mt-1 relative">
                <label for="product-image-1" class="block text-sm font-medium text-gray-700">Image 1</label>
                <input type="file" name="images" id="img1" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" accept="image/*" onchange="handleImageInput(this,'image1')" />
                <img id="image1" src="{{#if product.images.[0]}}{{product.images.[0]}}{{/if}}" class="mt-2 max-w-xs w-32 h-100" alt="Image Preview" onerror="this.src='default_image_path.png';" />
                <button onclick="deleteImage('Image1',0,'{{product._id}}')" type="button" class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                </button>

            </div>

            <!-- Image 2 -->
            <div class="mt-1 relative">
                <label for="product-image-2" class="block text-sm font-medium text-gray-700">Image 2</label>
                <input type="file" name="images" id="img2" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" accept="image/*" onchange="handleImageInput(this,'image2')" />
                <img id="image2" src="{{#if product.images.[1]}}{{product.images.[1]}}{{/if}}" class="mt-2 max-w-xs w-32 h-100" alt="Image Preview" onerror="this.src='default_image_path.png';" />
                <button onclick="deleteImage('Image2',1,'{{product._id}}')" type="button" class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                </button>

            </div>

            <!-- Image 3 -->
            <div class="mt-1 relative">
                <label for="product-image-3" class="block text-sm font-medium text-gray-700">Image 3</label>
                <input type="file" name="images" id="img3" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" accept="image/*" onchange="handleImageInput(this,'image3')" />
                <img id="image3" src="{{#if product.images.[2]}}{{product.images.[2]}}{{/if}}" class="mt-2 max-w-xs w-32 h-100" alt="Image Preview" onerror="this.src='default_image_path.png';" />
                <button onclick="deleteImage('Image3',2,'{{product._id}}')" type="button" class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                </button>

            </div>

            <!-- Image 4 -->
            <div class="mt-1 relative">
                <label for="product-image-4" class="block text-sm font-medium text-gray-700">Image 4</label>
                <input type="file" name="images" id="img4" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" accept="image/*" onchange="handleImageInput(this,'image4')" />
                <img id="image4" src="{{#if product.images.[3]}}{{product.images.[3]}}{{/if}}" class="mt-2 max-w-xs w-32 h-100" alt="Image Preview" onerror="this.src='default_image_path.png';" />
                <button onclick="deleteImage('Image4',3,'{{product._id}}')" type="button" class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                </button>

            </div>
        </div>

        <!-- Price and Stock (Two Columns on Larger Screens) -->
        <div class="flex flex-wrap -mx-2">
            <!-- Price -->
            <div class="w-full md:w-1/2 px-2 mb-4 md:mb-0">
                <label for="price" class="block text-sm font-medium text-gray-700">Price</label>
                <input type="text" name="price" value="{{product.price}}" id="price" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter product price" />
                <div class="mt-2 text-sm text-red-900 bg-red-300 p-2 rounded-md hidden" id="priceError"></div>
            </div>

            <!-- Stock -->
            <div class="w-full md:w-1/2 px-2">
                <label for="stock" class="block text-sm font-medium text-gray-700">Stock</label>
                <input type="number" name="stock" value="{{product.stock}}" id="stock" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter available stock" />
                <div class="mt-2 text-sm text-red-900 bg-red-300 p-2 rounded-md hidden" id="stockError"></div>
            </div>
        </div>

        <!-- Color -->
        <div>
            <label for="color" class="block text-sm font-medium text-gray-700">Colour</label>
            <input type="text" name="colour" value="{{product.colour}}" id="colour" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter product color" />
            <div class="mt-2 text-sm text-red-900 bg-red-300 p-2 rounded-md hidden" id="colourError"></div>
        </div>

        <!-- Description -->
        <div>
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea id="description" name="description" rows="4" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter product description">{{product.description}}</textarea>
        </div>
        <div class="mt-2 text-sm text-red-900 bg-red-300 p-2 rounded-md hidden" id="descriptionError"></div>

         <div>
            <label for="color" class="block text-sm font-medium text-gray-700">Storage</label>
            <input type="text" name="storage" id="storage" value="{{product.storage}}" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter product storage" />
        </div>
        <div class="mt-2 text-sm text-red-900 bg-red-300 p-2 rounded-md hidden" id="storageError"></div>

        <!-- Buttons -->
        <div class="flex justify-end space-x-2 md:space-x-4">
            <button type="reset" class="bg-gray-500 text-white px-3 py-2 md:px-4 rounded hover:bg-gray-600">Reset</button>
            <button type="submit" class="bg-blue-600 text-white px-3 py-2 md:px-4 rounded hover:bg-blue-500">
                <i class="fas fa-plus"></i> Submit Product
            </button>
        </div>
    </form>
</div>

<!-- Cropper Modal -->
<div id="cropper-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-4 rounded-lg max-w-lg w-full">
        <h3 class="text-lg font-semibold text-gray-700 mb-4">Crop Image</h3>
        <div>
            <img id="image-to-crop" class="max-w-full rounded-md" alt="Image for cropping" />
        </div>
        <div class="mt-4 flex justify-end space-x-2">
            <button id="cancel-crop" class="bg-gray-500 text-white px-3 py-2 rounded hover:bg-gray-600">Cancel</button>
            <button id="crop-image" class="bg-blue-600 text-white px-3 py-2 rounded hover:bg-blue-500">Crop</button>
        </div>
    </div>
</div>


<script>

    let originalImageUrl = null;

    let formData = new FormData();

    document.addEventListener('DOMContentLoaded', () => {
    const cropperModal = document.getElementById('cropper-modal');
    const imageToCrop = document.getElementById('image-to-crop');
    const cancelCropButton = document.getElementById('cancel-crop');
    const cropImageButton = document.getElementById('crop-image');
    let currentImagePreviewId = null;
    let cropper = null;

    // Function to handle image input
    window.handleImageInput = (inputElement, previewId) => {
        const file = inputElement.files[0];
        if (file && file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = () => {
                // Set up the image for cropping
                currentImagePreviewId = previewId;
                originalImageUrl = reader.result;
                imageToCrop.src = reader.result;

                // Wait until the image is fully loaded
                imageToCrop.onload = () => {
                    // Show the modal
                    cropperModal.classList.remove('hidden');

                    // Destroy the previous cropper instance (if any)
                    if (cropper) cropper.destroy();

                    // Initialize Cropper.js
                    cropper = new Cropper(imageToCrop, {
                        aspectRatio: 1, // You can set this to a different ratio if needed
                        viewMode: 2, // Ensures the entire image fits in the container
                        dragMode: 'move', // Enable dragging of the image
                        autoCropArea: 0.8, // Default cropping area
                        movable: true, // Allow moving the image
                        scalable: true, // Allow scaling the image
                        zoomable: true, // Allow zooming the image
                        background: true, // Show the checkerboard background
                        responsive: true, // Respond to container size changes
                    });
                };
            };
            reader.readAsDataURL(file);
        } else {
                Swal.fire({
                title: "Error!",
                text:"Image only can choose no other files and image with .jpg,.png,.jpeg only allowed",
                icon: "error",
                confirmButtonText: "OK",
                }).then(()=>{
                    document.getElementById(inputElement.id).value=""
                })
        }
    };

    // Handle crop action
    cropImageButton.addEventListener('click', () => {
        if (cropper) {
            cropper.getCroppedCanvas().toBlob((blob) => {
                const url = URL.createObjectURL(blob);

                // Update the corresponding image preview
                const imagePreview = document.getElementById(currentImagePreviewId);
                imagePreview.src = url;

                 formData.append('images',blob)

                // Close the modal
                cropperModal.classList.add('hidden');

                // Clean up the cropper
                cropper.destroy();
                cropper = null;
            });
        }
    });

    // Handle cancel action
    cancelCropButton.addEventListener('click', () => {
        const imagePreview = document.getElementById(currentImagePreviewId);
        imagePreview.src = originalImageUrl; 
        cropperModal.classList.add('hidden');
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        if (currentImagePreviewId) {
            const inputElement = document.querySelector(`input[id=${currentImagePreviewId.replace('image', 'img')}]`);
            inputElement.value = '';
        }
    });
});


    
    function deleteImage(productId,index) {
        fetch(`/admin/deleteproductimage/${productId}/${index}`)
    }

    function editProduct(e,productId){
        var isValid=true;
        e.preventDefault();
        const productName=document.getElementById("name").value
        const category=document.getElementById("category").value
        const price=document.getElementById("price").value
        const stock=document.getElementById("stock").value
        const colour=document.getElementById("colour").value
        const description=document.getElementById("description").value
        const storage=document.getElementById("storage").value

        if(!productName){
            document.getElementById("nameError").innerText="Enter the Product Name !"
            document.getElementById("nameError").classList.remove('hidden')
            isValid=false
        }
        if(!category){
            document.getElementById("categoryError").innerText="Enter the Product Category !"
            document.getElementById("categoryError").classList.remove('hidden')
            isValid=false
        }
        if(!price){
            document.getElementById("priceError").innerText="Enter the Product Price !"
            document.getElementById("priceError").classList.remove('hidden')
            isValid=false
        }else{
            if(price<=0){
               document.getElementById("priceError").innerText="Price cannot be zero or negative !"
               document.getElementById("priceError").classList.remove('hidden')
               isValid=false 
            }
        }
        if(!stock){
            document.getElementById("stockError").innerText="Enter the Product Stock !"
            document.getElementById("stockError").classList.remove('hidden')
            isValid=false
        }else{
            if(stock<=0){
            document.getElementById("stockError").innerText="Stock cannot be zero or negative !"
            document.getElementById("stockError").classList.remove('hidden')
            isValid=false
            }
        }
        if(!colour){
            document.getElementById("colourError").innerText="Enter the Product Colour !"
            document.getElementById("colourError").classList.remove('hidden')
            isValid=false
        }
        if(!description){
            document.getElementById("descriptionError").innerText="Enter the Product Description !"
            document.getElementById("descriptionError").classList.remove('hidden')
            isValid=false
        }
        if(!storage){
            document.getElementById("storageError").innerText="Enter the Product Storage !"
            document.getElementById("storageError").classList.remove('hidden')
            isValid=false
        }
         

        formData.append('name', productName);
        formData.append('catType', category);
        formData.append('price', price);
        formData.append('stock', stock);
        formData.append('colour', colour);
        formData.append('description', description);
        formData.append('storage', storage);



        if(isValid){
            fetch(`/admin/editProducts/${productId}`,{
                method:"POST",
                body:formData
            }).then((response)=>response.json()).then((response)=>{
                if(response.status){
                   Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text:response.message,
                    confirmButtonText: 'OK'
                    }).then(()=>{
                        location.href='/admin/products'
                    }) 
                }else{
                     Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text:response.message,
                    confirmButtonText: 'OK'
                    }).then(()=>{
                        location.reload();
                    })
                }
            })
        }

    }

    function deleteImage(image,index,productId){
    Swal.fire({
        title: 'Are you sure?',
        text:`Want to delete the ${image}`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed){
            fetch(`/admin/deleteproductimage/${productId}/${index}`,{
                method:"POST"
            }).then((response)=>response.json()).then((response)=>{
                if(response.status){
                    Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: `${image} is deleted from the product`,
                    confirmButtonColor: '#3085d6'
                }).then(()=>{
                    location.reload();
                })
                }else{
                    Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: message,
                    confirmButtonColor: '#d33'
                })
                }
            })
        }
    })
}
</script>
